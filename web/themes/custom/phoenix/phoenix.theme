<?php

/**
 * @file
 * Functions to support theming in the phoenix theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function phoenix_preprocess_html(&$variables) {

  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }
}

/**
 * Implements hook_page_attachments_alter
 *
 * Add custom meta tags to the header.
 */
function phoenix_page_attachments_alter(&$page) {
  // Optimize mobile viewport.
  $page['#attached']['html_head'][] = array(
    array(
      '#type'       => 'html_tag',
      '#tag'        => 'meta',
      '#attributes' => array(
        'name'    => 'viewport',
        'content' => 'width=device-width',
      ),
    ),
    'mobile_viewport'
  );

  // Force IE to use Chrome Frame if installed.
  $page['#attached']['html_head'][] = array(
    array(
      '#type'       => 'html_tag',
      '#tag'        => 'meta',
      '#attributes' => array(
        'content'    => 'ie=edge, chrome=1',
        'http-equiv' => 'x-ua-compatible',
      ),
    ),
    'chrome_frame'
  );

  // Remove image toolbar in IE.
  $page['#attached']['html_head'][] = array(
    array(
      '#type'       => 'html_tag',
      '#tag'        => 'meta',
      '#attributes' => array(
        'http-equiv' => 'ImageToolbar',
        'content'    => 'false',
      ),
    ),
    'ie_image_toolbar'
  );
}

/**
 * @param $variables
 */
function phoenix_preprocess_page(&$variables) {

  if (!$variables['is_front']) {

    // Move the page title to the header.
//    $variables['page']['header'] = $variables['page']['content']['phoenix_page_title'];
//    unset($variables['page']['content']['phoenix_page_title']);

    // Adjust the styles based on the node.
    if (isset($variables['node']) && 'message' == $variables['node']->getType()) {
      $path                                                = phoenix_get_series_graphic($variables['node']);
      $variables['page']['header']['#attributes']['style'] = sprintf('background-image: url(%s);', $path);
      $page_title_class                                    = 'title-banner';
    } else {
      $page_title_class = 'title-simple';
    }

    $variables['page']['header']['#attributes']['class'] = [$page_title_class];
  }

  if (isset($variables['page']['content']['phoenix_content'])) {
    $has_sidebar = !empty($variables['page']['sidebar_left']);
    if ($has_sidebar) {
      $variables['page']['content']['phoenix_content']['#attributes']['class'] = ['with-sidebar'];
    }
  }

  $contact                 = \Drupal::config('desertsend.contact')->get();
  $variables['contact']    = $contact;
  $variables['theme_path'] = drupal_get_path('theme', 'phoenix');
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function phoenix_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function phoenix_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // phoenix has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'phoenix/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function phoenix_preprocess_node(&$variables) {
  /** @var Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  if ($variables['view_mode'] === 'full' && 'message' === $node->getType()) {

    $variables['series_graphic'] = phoenix_get_series_graphic($node);

    /** @var Drupal\file\Entity\File $file */
    $file                                                                     = $node->get('field_message_audio')->entity;
    $path                                                                     = file_create_url($file->getFileUri());
    $variables['#attached']['library'][]                                      = 'phoenix/messages';
    $variables['#attached']['drupalSettings']['phoenix']['messages']['audio'] = $path;

  }

  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function phoenix_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }

  // Add front page variable.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  } catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function phoenix_preprocess_menu(&$variables) {

  // Honestly, it's ridiculous that there isn't a better way to do this.
  $variables['theme_path'] = drupal_get_path('theme', 'phoenix');

  // Add site variables to the menu template.
  $config                       = \Drupal::config('system.site');
  $variables['site_name']       = $config->get('name');
  $variables['site_slogan']     = $config->get('slogan');
  $variables['meeting_details'] = \Drupal::config('desertsend.contact')
                                         ->get('meeting_details');
//  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function phoenix_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $search_field_ids = [
    'views-exposed-form-message-archive-archive',
    'views-exposed-form-message-archive-by-series',
    'views-exposed-form-message-archive-by-speaker',
    'views-exposed-form-search-content-main',
    'search-block-form'
  ];
  if (in_array($variables['element']['#id'], $search_field_ids)) {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implements theme_menu_local_task().
 */
function phoenix_menu_local_task(&$variables) {
  $variables['link']['#attributes'] = array('class' => array('button'));
  return render($variables['link']);
}

function phoenix_get_series_graphic(Drupal\node\Entity\Node $node) {
  /** @var Drupal\file\Entity\File $series_graphic */
  $series_graphic      = $node->get('field_message_series')->entity->get('field_series_graphic')->entity;
  $series_graphic_path = file_create_url($series_graphic->getFileUri());
  return $series_graphic_path;
}
